#!/bin/bash
# LINBO.kernel
# download, configure and prepare Linux kernel 
# origin by (C) Klaus Knopper 2013
# adapted to tcos by openthinclient developers
# License: GPL V2

set -x

if [ -z $KVERS ]; then
	exit 0
fi

MAJOR=${KVERS%.*}  # 3.4.70 -> 3.4
MINOR=${KVERS##*.} # 3.4.70 -> 70

if ! [ -r Kernel/aufs3-linux ]; then
	mkdir Kernel
	echo -e "\033[1m Fetching kernel/aufs3-linux from github.com.\033[0m"
	cd Kernel
	git clone https://github.com/sfjro/aufs3-linux.git || { rm -rf Kernel/aufs3-linux.git; exit 1; }
    cd ..
fi
# check, whether there is a copy of a kernel checkout already
if  [ -d Kernel/aufs3-linux-${KVERS} ]; then
	:
    MENUCONFIG=true
else
	cd Kernel/aufs3-linux || exit 0
	echo $PWD
    # 1. get new code and jump to a safe place -> HEAD
    git fetch
    git reset --hard origin/master
    git checkout master
    # 2. clean (maybe) existing old branches
    git branch -D aufs${MAJOR}
    # 3. get a clean repo to work with
    git checkout -f aufs${MAJOR}

	if ! [ -e ../patch-${KVERS}.xz ]; then
		wget -c -P ../ https://www.kernel.org/pub/linux/kernel/v3.x/patch-${KVERS}.xz
	fi

	xzcat ../patch-${KVERS}.xz | patch -p1
	# create a copy of the directory for later
    echo "Creating a copy of the git repo to ../aufs3-linux-${KVERS}"
	rsync -a --exclude=.git/ . ../aufs3-linux-${KVERS} || exit 0
    cd ../..
fi

cd Kernel/aufs3-linux-${KVERS}

myARCH=`uname -m`

case "$myARCH" in
	i[3456]86) myARCH=i386;;
esac

[ "$myARCH" != "x86_64" -a "$myARCH" != "i386" ] && echo "The architecture of your buildsystem is not supported by this script. Feel free to adjust it." && exit 1
#
# flip on CROSS
if [ "$CROSS" = "true" ]; then 
    case "$myARCH" in 
    x86_64)
	    arch="i386";;
    i386)
            arch="x86_64";;
    esac
else 
    arch="$myARCH"
fi

# make-kpkg needs DEB_HOST_ARCH, otherwise it will use the build hosts arch
export DEB_HOST_ARCH=$arch

if [ "$arch" = "i386" ]; then 
    mkpkgParms="--revision=1 --append-to-version=+tcos"
else
    mkpkgParms="--revision=1 --append-to-version=+tcos64"
fi

if [ -e ../../Sources/kernel${MAJOR}-"$arch".config ]; then
    read -p "Use the kernel configuration from Source? [Y/n] " a
    case  "$a" in
        N*|n*)
            ;;
        *)cp ../../Sources/kernel${MAJOR}-"$arch".config ./.config
            ;;
    esac
else
    make ARCH="$arch" menuconfig
fi

# build procedure

if [ "$MENUCONFIG" = "true" ]; then
    make ARCH="$arch" menuconfig
fi

(make ARCH="$arch" oldconfig && make -j8 ARCH="$arch" bzImage modules && \
rm -rf debian; CONCURRENCY_LEVEL=8 ARCH="$arch" MODULE_LOC=`pwd`/../modules fakeroot make-kpkg --arch="$arch" --cross-compile - $mkpkgParms --us --uc kernel_image modules_image kernel_headers kernel_source )

read -p "Save the kernel configuration to Sources? [Y/n] " a
case "$a" in 
	N*|n*) 
	    ;; 
	*)cp -au ./.config ../../Sources/kernel${MAJOR}-"$arch".config
	    ;; 
esac
