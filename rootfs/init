#!/bin/sh
#
# LINBO busybox-based initramfs bootscript
# (C) 2013 by Steffen Hoenig <s.hoenig@openthinclient.com>
#	      Joern Frenzel <j.frenzel@openthinclient.com>
# LICENSE: GPL V3

# Its purpose:
# 1. Mounting a squashfs container over nfs
# 2. Unifying this ro conainter with ramdisk and file overlay
# 3. Hand over control to "real" sysv init.

# Preconditions:
# - Kernel contains all _needed_ nfs, ethernet, aufs modules


. /init_functions

TCOS="/tcos"
LINK="$TCOS/link"       # nfs             OTC-Server:/openthinclient # the initial one!
WRITE="$TCOS/write"     # for aufs to write this is just a folder inside the /
BASE="$TCOS/base"       # squashfs # via loopback sfs-file: /tcos/link/sfs/base.sfs
PACKAGE="$TCOS/package/opt"
MODULE="$TCOS/module"
SHADOW="$TCOS/shadow"

## MAIN ####################################################

for folder in $LINK $WRITE $BASE $PACKAGE $MODULE $SHADOW /proc /sys; do mkdir -p $folder ; done

mount -t proc proc /proc
mount -t sysfs sys /sys

mdev -s && echo "/dev...set up by ${BLUE}mdev${NORMAL}"

export PATH=/bin:/usr/bin:/sbin

read CMDLINE < /proc/cmdline

getbootparams


#to override the dhcpd setting set up a HOSTNAME here
HOSTNAME="" 

ip addr add 127.0.0.1/8 dev lo
ip link set dev lo up

DHCP=""

for i in 0; do
	echo "${CRE}${BLUE}DHCP Broadcasting for IP address (${MAGENTA}eth$i${BLUE})... ${NORMAL}"
	ip link set dev eth$i up
	if [ -n "$HOSTNAME" ]; then
   	 udhcpc -i eth$i -H $HOSTNAME -s /etc/udhcpc/default.script && DHCP="eth$i"
  	else
   	 udhcpc -i eth$i -s /etc/udhcpc/default.script && DHCP="eth$i"
  	fi
	[ -n "$DHCP" ] && break
	echo "${RED}No answer from network.${NORMAL}"
	debugshell
done


# NFS
MOUNTED=""

[ -n $nfsroot ] && NFSD=$nfsroot

touch /etc/fstab
mount -t nfs -o nolock -o ro -o retrans=10 -o vers=2 "$NFSD" $LINK 

if [ $? -eq 0 ]; then 
  MOUNTED="true" 
  echo "$NFSD mounted ${GREEN} successfully...${NORMAL}"
else 
  echo "${RED} could not mount $NFSD - exiting. ${NORMAL}"
  exit 1
fi

TREE=""

# mount base and module sfs files
[ -f "$LINK/sfs/base.sfs" ] || (echo "${RED} could not find $LINK/sfs/base.sfs - exiting. ${NORMAL}" && exit 1)
if mount -t squashfs -o loop,ro "$LINK/sfs/base.sfs" $BASE 2>/dev/null; then
	echo "base.sfs mounted...${GREEN}yes${NORMAL}"
	TREE=":$BASE"
else
	echo "base.sfs mounted...${RED}no${NORMAL}"
fi

# exit 0
#########

# other SFS
# mount module sfs and packages sfs

echo "0" >/proc/sys/kernel/printk

mountsfs module
mountsfs package

echo "-------> br=${WRITE}=rw${TREE}"

# mount union
#
mount -t aufs -o nowarn_perm,br=${WRITE}=rw${TREE} none $SHADOW #TREE has a leading colon ":" !

debugshell

exit 0

