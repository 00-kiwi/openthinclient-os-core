#!/bin/sh

PREREQ=""

prereqs()
{
	echo "$PREREQ"
}

case $1 in
prereqs)
	prereqs
	exit 0
	;;
esac

# vars
AUFS_RW_DIR="${rootmnt}/var/aufs"
AUFS_OLDROOT_DIR="${rootmnt}/var/tcos"
AUFS_SFS_DIR="${rootmnt}/var/sfs"

# Bring in the main config
. /conf/initramfs.conf


# load unionfs module
#if ! modprobe -qs aufs brs=1; then
if ! modprobe -qs aufs; then
	echo "Error in $0: loading aufs module failed!"
	exit 65
fi

# load loop module
#if ! modprobe -qs loop max_loop=256 ; then
#        echo "Error in $0: loading loop module failed!"
#        exit 66
#fi

# load squashfs module
if ! modprobe -qs squashfs; then
        echo "Error in $0: loading squashfs module failed!"
        exit 67
fi

# load generic LZMA uncompression module
#if ! modprobe -qs unlzma; then
#        echo "Error in $0: loading unlzma module failed!"
#        exit 68
#fi

# load LZMA uncompression kernel module for squashfs
#if ! modprobe -qs sqlzma; then
#        echo "Error in $0: loading sqlzma module failed!"
#        exit 69
#fi

mkdir -p /rw /oldroot /base /module
mount -t tmpfs aufs-tmpfs /rw

BRANCHES=/oldroot

LOOP_ID=0
# mount base and module sfs files
if [ -d "$rootmnt/sfs" ]; then
	BASE_FILE=`ls $rootmnt/sfs/base.sfs 2>/dev/null`
	MODULE_FILES=`ls $rootmnt/sfs/module/*.sfs 2>/dev/null | sort`

	# mount base file
	if [ "$BASE_FILE" ]; then
		mknod -m 660 /dev/loop${LOOP_ID} b 7 $LOOP_ID && let LOOP_ID++
		mount -t squashfs -o loop,ro "$BASE_FILE" /base
		MOVEMOUNTS="/base"
		BRANCHES="/base"
	fi

	# mount modules
	for i in $MODULE_FILES; do
		TARGET="/module/$(echo $(basename $i) | sed 's/\.sfs$//g')"
		mkdir -p "$TARGET"
		mknod -m 660 /dev/loop${LOOP_ID} b 7 $LOOP_ID && let LOOP_ID++
		mount -t squashfs -o loop,ro "$i" "$TARGET"
		MOVEMOUNTS="$MOVEMOUNTS $TARGET"
		if [ "$BRANCHES" ]; then
			BRANCHES="$TARGET $BRANCHES"
		else
			BRANCHES="$TARGET"
		fi
	done

	BRANCHES=`echo $BRANCHES | sed "s/ /=rr:/g"`=rr
fi

# move root to /oldroot
mount -o move ${rootmnt} /oldroot

# mount union
mount -t aufs -o nowarn_perm,br:/rw=rw:$BRANCHES aufs ${rootmnt}

# mount packages on top of union
if [ -d "/oldroot/sfs/package" ]; then
	# may create opt dir inside union
	if [ ! -d "${rootmnt}/opt" ]; then
		mkdir "${rootmnt}/opt"
	fi

	PACKAGE_FILES=`ls /oldroot/sfs/package/*.sfs 2>/dev/null | sort`
	for i in $PACKAGE_FILES; do
		TARGET="${rootmnt}/opt/$(echo $(basename $i) | sed 's/\.sfs$//g')"
		mkdir -p "$TARGET"
		mknod -m 660 /dev/loop${LOOP_ID} b 7 $LOOP_ID && let LOOP_ID++
		mount -t squashfs -o loop,ro "$i" "$TARGET"
	done
fi

# may create rw dir inside union
if [ ! -d "$AUFS_RW_DIR" ]; then
	mkdir -p "$AUFS_RW_DIR"
fi

# may create oldroot dir inside union
if [ ! -d "$AUFS_OLDROOT_DIR" ]; then
        mkdir -p "$AUFS_OLDROOT_DIR"
fi

# may create sfs dir inside union
if [ ! -d "$AUFS_SFS_DIR" ]; then
	mkdir -p "$AUFS_SFS_DIR"
fi

# move rw dir back to userspace
mount -o move /rw "$AUFS_RW_DIR"

# move /oldroot back to userspace
mount -o move /oldroot "$AUFS_OLDROOT_DIR"

# move all loopback sfs's back to userspace
for i in $MOVEMOUNTS; do
	mkdir -p "$AUFS_SFS_DIR/$i"
	mount -o move "$i" "$AUFS_SFS_DIR/$i"
done

# copy over dhcp config	
cp /tmp/net-*.conf ${rootmnt}/etc/
